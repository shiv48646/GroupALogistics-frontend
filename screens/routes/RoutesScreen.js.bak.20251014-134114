// screens/routes/RoutesScreen.js - FIXED VERSION
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  Modal,
  Alert,
  FlatList,
  Dimensions
} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import {
  selectFilteredRoutes,
  selectRouteStatistics,
  updateFilters,
  createRoute,
  updateRoute,
  deleteRoute,
  startRoute,
  completeRoute,
  setSelectedRoute,
  addStop,
  removeStop
} from '../../store/slices/routesSlice';

const { width } = Dimensions.get('window');

const RoutesScreen = ({ navigation }) => {
  const dispatch = useDispatch();
  const routes = useSelector(selectFilteredRoutes);
  const statistics = useSelector(selectRouteStatistics) || {
  totalRoutes: 0,
  activeRoutes: 0,
  inTransitRoutes: 0,
  completedRoutes: 0,
  plannedRoutes: 0
};
  
  const [activeTab, setActiveTab] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedRoute, setSelectedRouteLocal] = useState(null);
  const [viewMode, setViewMode] = useState('list');

  // Filter routes by tab
  const filteredRoutes = routes.filter(route => {
    if (activeTab === 'all') return true;
    if (activeTab === 'active') return route.status === 'active' || route.status === 'in-transit';
    if (activeTab === 'planning') return route.status === 'planning';
    if (activeTab === 'completed') return route.status === 'completed';
    return true;
  });

  // Search handler
  useEffect(() => {
    dispatch(updateFilters({ searchQuery }));
  }, [searchQuery]);

  // Status colors
  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#10B981';
      case 'in-transit': return '#3B82F6';
      case 'completed': return '#6B7280';
      case 'planning': return '#F59E0B';
      default: return '#6B7280';
    }
  };

  // Priority colors
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#EF4444';
      case 'medium': return '#F59E0B';
      case 'low': return '#10B981';
      default: return '#6B7280';
    }
  };

  // View route details
  const viewRouteDetails = (route) => {
    setSelectedRouteLocal(route);
    dispatch(setSelectedRoute(route));
    setShowDetailsModal(true);
  };

  // Start route
  const handleStartRoute = (routeId) => {
    Alert.alert(
      'Start Route',
      'Are you sure you want to start this route?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Start',
          onPress: () => {
            dispatch(startRoute(routeId));
            Alert.alert('Success', 'Route started successfully!');
          }
        }
      ]
    );
  };

  // Complete route
  const handleCompleteRoute = (routeId) => {
    Alert.alert(
      'Complete Route',
      'Mark this route as completed?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Complete',
          onPress: () => {
            dispatch(completeRoute({ routeId, actualTime: '8 hours' }));
            setShowDetailsModal(false);
            Alert.alert('Success', 'Route completed successfully!');
          }
        }
      ]
    );
  };

  // Delete route
  const handleDeleteRoute = (routeId) => {
    Alert.alert(
      'Delete Route',
      'Are you sure you want to delete this route? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: () => {
            dispatch(deleteRoute(routeId));
            setShowDetailsModal(false);
            Alert.alert('Success', 'Route deleted successfully!');
          }
        }
      ]
    );
  };

  // Render statistics cards
  const renderStatistics = () => (
    <View style={styles.statsContainer}>
      <View style={styles.statCard}>
        <Icon name="routes" size={24} color="#3B82F6" />
        <Text style={styles.statValue}>{statistics.totalRoutes}</Text>
        <Text style={styles.statLabel}>Total Routes</Text>
      </View>

      <View style={styles.statCard}>
        <Icon name="truck-fast" size={24} color="#10B981" />
        <Text style={styles.statValue}>{statistics.inTransitRoutes}</Text>
        <Text style={styles.statLabel}>In Transit</Text>
      </View>

      <View style={styles.statCard}>
        <Icon name="check-circle" size={24} color="#6B7280" />
        <Text style={styles.statValue}>{statistics.completedRoutes}</Text>
        <Text style={styles.statLabel}>Completed</Text>
      </View>

      <View style={styles.statCard}>
        <Icon name="clock-outline" size={24} color="#F59E0B" />
        <Text style={styles.statValue}>{statistics.plannedRoutes}</Text>
        <Text style={styles.statLabel}>Planning</Text>
      </View>
    </View>
  );

  // Render route card
  const renderRouteCard = ({ item: route }) => (
    <TouchableOpacity
      style={styles.routeCard}
      onPress={() => viewRouteDetails(route)}
      activeOpacity={0.7}
    >
      {/* Header */}
      <View style={styles.routeHeader}>
        <View style={styles.routeHeaderLeft}>
          <Text style={styles.routeId}>{route.id}</Text>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(route.status) + '20' }]}>
            <Text style={[styles.statusText, { color: getStatusColor(route.status) }]}>
              {route.status.toUpperCase()}
            </Text>
          </View>
        </View>
        <View style={[styles.priorityBadge, { backgroundColor: getPriorityColor(route.priority) + '20' }]}>
          <Icon name="flag" size={12} color={getPriorityColor(route.priority)} />
          <Text style={[styles.priorityText, { color: getPriorityColor(route.priority) }]}>
            {route.priority.toUpperCase()}
          </Text>
        </View>
      </View>

      {/* Route Name */}
      <Text style={styles.routeName}>{route.routeName}</Text>

      {/* Origin & Destination */}
      <View style={styles.locationContainer}>
        <View style={styles.locationRow}>
          <View style={[styles.locationDot, { backgroundColor: '#10B981' }]} />
          <View style={styles.locationInfo}>
            <Text style={styles.locationLabel}>Origin</Text>
            <Text style={styles.locationName}>{route.origin.name}</Text>
            <Text style={styles.locationAddress}>{route.origin.address}</Text>
          </View>
        </View>

        {route.stops.length > 0 ? (
          <View style={styles.stopsIndicator}>
            <Icon name="dots-vertical" size={16} color="#9CA3AF" />
            <Text style={styles.stopsText}>{route.stops.length} stop(s)</Text>
          </View>
        ) : null}

        <View style={styles.locationRow}>
          <View style={[styles.locationDot, { backgroundColor: '#EF4444' }]} />
          <View style={styles.locationInfo}>
            <Text style={styles.locationLabel}>Destination</Text>
            <Text style={styles.locationName}>{route.destination.name}</Text>
            <Text style={styles.locationAddress}>{route.destination.address}</Text>
          </View>
        </View>
      </View>

      {/* Route Details */}
      <View style={styles.detailsRow}>
        <View style={styles.detailItem}>
          <Icon name="map-marker-distance" size={16} color="#6B7280" />
          <Text style={styles.detailText}>{route.distance}</Text>
        </View>
        <View style={styles.detailItem}>
          <Icon name="clock-outline" size={16} color="#6B7280" />
          <Text style={styles.detailText}>{route.estimatedTime}</Text>
        </View>
        <View style={styles.detailItem}>
          <Icon name="currency-inr" size={16} color="#6B7280" />
          <Text style={styles.detailText}>{route.cost}</Text>
        </View>
      </View>

      {/* Driver & Vehicle */}
      <View style={styles.assignmentRow}>
        <View style={styles.assignmentItem}>
          <Icon name="account" size={16} color="#3B82F6" />
          <Text style={styles.assignmentText}>{route.driver.name}</Text>
        </View>
        <View style={styles.assignmentItem}>
          <Icon name="truck" size={16} color="#3B82F6" />
          <Text style={styles.assignmentText}>{route.vehicle.number}</Text>
        </View>
      </View>

      {/* Quick Actions */}
      <View style={styles.quickActions}>
        {route.status === 'planning' ? (
          <TouchableOpacity
            style={[styles.actionButton, styles.startButton]}
            onPress={() => handleStartRoute(route.id)}
          >
            <Icon name="play" size={16} color="#fff" />
            <Text style={styles.actionButtonText}>Start Route</Text>
          </TouchableOpacity>
        ) : null}
        {(route.status === 'active' || route.status === 'in-transit') ? (
          <TouchableOpacity
            style={[styles.actionButton, styles.trackButton]}
            onPress={() => navigation.navigate('TrackRoute', { routeId: route.id })}
          >
            <Icon name="map-marker" size={16} color="#fff" />
            <Text style={styles.actionButtonText}>Track Live</Text>
          </TouchableOpacity>
        ) : null}
        <TouchableOpacity
          style={[styles.actionButton, styles.detailsButton]}
          onPress={() => viewRouteDetails(route)}
        >
          <Icon name="eye" size={16} color="#3B82F6" />
          <Text style={[styles.actionButtonText, { color: '#3B82F6' }]}>Details</Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  // Render route details modal
  const renderDetailsModal = () => {
    if (!selectedRoute) return null;

    return (
      <Modal
        visible={showDetailsModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowDetailsModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            {/* Modal Header */}
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Route Details</Text>
              <TouchableOpacity onPress={() => setShowDetailsModal(false)}>
                <Icon name="close" size={24} color="#1F2937" />
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.modalBody} showsVerticalScrollIndicator={false}>
              {/* Route Info */}
              <View style={styles.modalSection}>
                <Text style={styles.modalSectionTitle}>Route Information</Text>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Route ID:</Text>
                  <Text style={styles.infoValue}>{selectedRoute.id}</Text>
                </View>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Route Name:</Text>
                  <Text style={styles.infoValue}>{selectedRoute.routeName}</Text>
                </View>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Status:</Text>
                  <View style={[styles.statusBadge, { backgroundColor: getStatusColor(selectedRoute.status) + '20' }]}>
                    <Text style={[styles.statusText, { color: getStatusColor(selectedRoute.status) }]}>
                      {selectedRoute.status.toUpperCase()}
                    </Text>
                  </View>
                </View>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Priority:</Text>
                  <View style={[styles.priorityBadge, { backgroundColor: getPriorityColor(selectedRoute.priority) + '20' }]}>
                    <Icon name="flag" size={12} color={getPriorityColor(selectedRoute.priority)} />
                    <Text style={[styles.priorityText, { color: getPriorityColor(selectedRoute.priority) }]}>
                      {selectedRoute.priority.toUpperCase()}
                    </Text>
                  </View>
                </View>
              </View>

              {/* Locations */}
              <View style={styles.modalSection}>
                <Text style={styles.modalSectionTitle}>Locations</Text>
                <View style={styles.locationDetailCard}>
                  <Icon name="map-marker-check" size={20} color="#10B981" />
                  <View style={styles.locationDetailInfo}>
                    <Text style={styles.locationDetailLabel}>Origin</Text>
                    <Text style={styles.locationDetailName}>{selectedRoute.origin.name}</Text>
                    <Text style={styles.locationDetailAddress}>{selectedRoute.origin.address}</Text>
                  </View>
                </View>

                {selectedRoute.stops.map((stop, index) => (
                  <View key={index} style={styles.locationDetailCard}>
                    <Icon name="map-marker" size={20} color="#F59E0B" />
                    <View style={styles.locationDetailInfo}>
                      <Text style={styles.locationDetailLabel}>Stop {index + 1}</Text>
                      <Text style={styles.locationDetailName}>{stop.name}</Text>
                      <Text style={styles.locationDetailAddress}>{stop.address}</Text>
                    </View>
                  </View>
                ))}

                <View style={styles.locationDetailCard}>
                  <Icon name="map-marker-radius" size={20} color="#EF4444" />
                  <View style={styles.locationDetailInfo}>
                    <Text style={styles.locationDetailLabel}>Destination</Text>
                    <Text style={styles.locationDetailName}>{selectedRoute.destination.name}</Text>
                    <Text style={styles.locationDetailAddress}>{selectedRoute.destination.address}</Text>
                  </View>
                </View>
              </View>

              {/* Route Metrics */}
              <View style={styles.modalSection}>
                <Text style={styles.modalSectionTitle}>Route Metrics</Text>
                <View style={styles.metricsGrid}>
                  <View style={styles.metricCard}>
                    <Icon name="map-marker-distance" size={24} color="#3B82F6" />
                    <Text style={styles.metricValue}>{selectedRoute.distance}</Text>
                    <Text style={styles.metricLabel}>Distance</Text>
                  </View>
                  <View style={styles.metricCard}>
                    <Icon name="clock-outline" size={24} color="#10B981" />
                    <Text style={styles.metricValue}>{selectedRoute.estimatedTime}</Text>
                    <Text style={styles.metricLabel}>Est. Time</Text>
                  </View>
                  <View style={styles.metricCard}>
                    <Icon name="currency-inr" size={24} color="#F59E0B" />
                    <Text style={styles.metricValue}>{selectedRoute.cost}</Text>
                    <Text style={styles.metricLabel}>Total Cost</Text>
                  </View>
                  <View style={styles.metricCard}>
                    <Icon name="gas-station" size={24} color="#EF4444" />
                    <Text style={styles.metricValue}>{selectedRoute.fuelCost}</Text>
                    <Text style={styles.metricLabel}>Fuel Cost</Text>
                  </View>
                </View>
              </View>

              {/* Assignment Details */}
              <View style={styles.modalSection}>
                <Text style={styles.modalSectionTitle}>Assignment</Text>
                <View style={styles.assignmentDetailCard}>
                  <Icon name="account-circle" size={24} color="#3B82F6" />
                  <View style={styles.assignmentDetailInfo}>
                    <Text style={styles.assignmentDetailLabel}>Driver</Text>
                    <Text style={styles.assignmentDetailValue}>{selectedRoute.driver.name}</Text>
                    <Text style={styles.assignmentDetailSubtext}>{selectedRoute.driver.phone}</Text>
                  </View>
                </View>
                <View style={styles.assignmentDetailCard}>
                  <Icon name="truck" size={24} color="#10B981" />
                  <View style={styles.assignmentDetailInfo}>
                    <Text style={styles.assignmentDetailLabel}>Vehicle</Text>
                    <Text style={styles.assignmentDetailValue}>{selectedRoute.vehicle.number}</Text>
                    <Text style={styles.assignmentDetailSubtext}>{selectedRoute.vehicle.type}</Text>
                  </View>
                </View>
              </View>

              {/* Orders */}
              <View style={styles.modalSection}>
                <Text style={styles.modalSectionTitle}>Associated Orders</Text>
                {selectedRoute.orders.map((orderId, index) => (
                  <TouchableOpacity key={index} style={styles.orderCard}>
                    <Icon name="package-variant" size={20} color="#3B82F6" />
                    <Text style={styles.orderText}>{orderId}</Text>
                    <Icon name="chevron-right" size={20} color="#9CA3AF" />
                  </TouchableOpacity>
                ))}
              </View>

              {/* Notes */}
              {selectedRoute.notes ? (
                <View style={styles.modalSection}>
                  <Text style={styles.modalSectionTitle}>Notes</Text>
                  <View style={styles.notesCard}>
                    <Icon name="note-text" size={20} color="#F59E0B" />
                    <Text style={styles.notesText}>{selectedRoute.notes}</Text>
                  </View>
                </View>
              ) : null}

              {/* Action Buttons */}
              <View style={styles.modalActions}>
                {selectedRoute.status === 'planning' ? (
                  <TouchableOpacity
                    style={[styles.modalActionButton, styles.modalStartButton]}
                    onPress={() => handleStartRoute(selectedRoute.id)}
                  >
                    <Icon name="play" size={20} color="#fff" />
                    <Text style={styles.modalActionButtonText}>Start Route</Text>
                  </TouchableOpacity>
                ) : null}

                {(selectedRoute.status === 'active' || selectedRoute.status === 'in-transit') ? (
                  <>
                    <TouchableOpacity
                      style={[styles.modalActionButton, styles.modalCompleteButton]}
                      onPress={() => handleCompleteRoute(selectedRoute.id)}
                    >
                      <Icon name="check-circle" size={20} color="#fff" />
                      <Text style={styles.modalActionButtonText}>Complete Route</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[styles.modalActionButton, styles.modalTrackButton]}
                      onPress={() => {
                        setShowDetailsModal(false);
                        navigation.navigate('TrackRoute', { routeId: selectedRoute.id });
                      }}
                    >
                      <Icon name="map-marker" size={20} color="#fff" />
                      <Text style={styles.modalActionButtonText}>Track Live</Text>
                    </TouchableOpacity>
                  </>
                ) : null}

                <TouchableOpacity
                  style={[styles.modalActionButton, styles.modalEditButton]}
                  onPress={() => {
                    setShowDetailsModal(false);
                    navigation.navigate('EditRoute', { route: selectedRoute });
                  }}
                >
                  <Icon name="pencil" size={20} color="#3B82F6" />
                  <Text style={[styles.modalActionButtonText, { color: '#3B82F6' }]}>Edit Route</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[styles.modalActionButton, styles.modalDeleteButton]}
                  onPress={() => handleDeleteRoute(selectedRoute.id)}
                >
                  <Icon name="delete" size={20} color="#EF4444" />
                  <Text style={[styles.modalActionButtonText, { color: '#EF4444' }]}>Delete Route</Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
          </View>
        </View>
      </Modal>
    );
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerTop}>
          <View>
            <Text style={styles.headerTitle}>Route Planning</Text>
            <Text style={styles.headerSubtitle}>Manage and optimize delivery routes</Text>
          </View>
          <TouchableOpacity
            style={styles.createButton}
            onPress={() => navigation.navigate('CreateRoute')}
          >
            <Icon name="plus" size={20} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Search Bar */}
        <View style={styles.searchContainer}>
          <Icon name="magnify" size={20} color="#9CA3AF" />
          <TextInput
            style={styles.searchInput}
            placeholder="Search routes, drivers, locations..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#9CA3AF"
          />
          {searchQuery.length > 0 ? (
            <TouchableOpacity onPress={() => setSearchQuery('')}>
              <Icon name="close-circle" size={20} color="#9CA3AF" />
            </TouchableOpacity>
          ) : null}
        </View>

        {/* View Mode Toggle */}
        <View style={styles.viewModeContainer}>
          <TouchableOpacity
            style={[styles.viewModeButton, viewMode === 'list' && styles.viewModeButtonActive]}
            onPress={() => setViewMode('list')}
          >
            <Icon name="view-list" size={20} color={viewMode === 'list' ? '#fff' : '#6B7280'} />
            <Text style={[styles.viewModeText, viewMode === 'list' && styles.viewModeTextActive]}>List</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.viewModeButton, viewMode === 'map' && styles.viewModeButtonActive]}
            onPress={() => Alert.alert('Map View', 'Map view coming soon!')}
          >
            <Icon name="map" size={20} color={viewMode === 'map' ? '#fff' : '#6B7280'} />
            <Text style={[styles.viewModeText, viewMode === 'map' && styles.viewModeTextActive]}>Map</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Statistics */}
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.statsScroll}
        contentContainerStyle={styles.statsScrollContent}
      >
        {renderStatistics()}
      </ScrollView>

      {/* Tabs */}
      <View style={styles.tabsContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'all' && styles.tabActive]}
          onPress={() => setActiveTab('all')}
        >
          <Text style={[styles.tabText, activeTab === 'all' && styles.tabTextActive]}>
            All ({statistics.totalRoutes})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'active' && styles.tabActive]}
          onPress={() => setActiveTab('active')}
        >
          <Text style={[styles.tabText, activeTab === 'active' && styles.tabTextActive]}>
            Active ({statistics.activeRoutes + statistics.inTransitRoutes})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'planning' && styles.tabActive]}
          onPress={() => setActiveTab('planning')}
        >
          <Text style={[styles.tabText, activeTab === 'planning' && styles.tabTextActive]}>
            Planning ({statistics.plannedRoutes})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'completed' && styles.tabActive]}
          onPress={() => setActiveTab('completed')}
        >
          <Text style={[styles.tabText, activeTab === 'completed' && styles.tabTextActive]}>
            Completed ({statistics.completedRoutes})
          </Text>
        </TouchableOpacity>
      </View>

      {/* Routes List */}
      {filteredRoutes.length > 0 ? (
        <FlatList
          data={filteredRoutes}
          renderItem={renderRouteCard}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.routesList}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Icon name="routes" size={64} color="#D1D5DB" />
          <Text style={styles.emptyTitle}>No routes found</Text>
          <Text style={styles.emptyText}>
            {searchQuery ? 'Try adjusting your search' : 'Create your first route to get started'}
          </Text>
          {!searchQuery ? (
            <TouchableOpacity
              style={styles.emptyButton}
              onPress={() => navigation.navigate('CreateRoute')}
            >
              <Icon name="plus" size={20} color="#fff" />
              <Text style={styles.emptyButtonText}>Create Route</Text>
            </TouchableOpacity>
          ) : null}
        </View>
      )}

      {/* Details Modal */}
      {renderDetailsModal()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB'
  },
  header: {
    backgroundColor: '#fff',
    padding: 16,
    paddingTop: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937'
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 4
  },
  createButton: {
    backgroundColor: '#3B82F6',
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 3,
    shadowColor: '#3B82F6',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F3F4F6',
    borderRadius: 12,
    paddingHorizontal: 12,
    height: 48,
    marginBottom: 12
  },
  searchInput: {
    flex: 1,
    marginLeft: 8,
    fontSize: 14,
    color: '#1F2937'
  },
  viewModeContainer: {
    flexDirection: 'row',
    marginRight: 8
  },
  viewModeButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    marginRight: 8
  },
  viewModeButtonActive: {
    backgroundColor: '#3B82F6'
  },
  viewModeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280',
    marginLeft: 6
  },
  viewModeTextActive: {
    color: '#fff'
  },
  statsScroll: {
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  statsScrollContent: {
    padding: 16
  },
  statsContainer: {
    flexDirection: 'row',
    marginRight: 12
  },
  statCard: {
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    minWidth: 110,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginRight: 12
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
    marginTop: 8
  },
  statLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
    textAlign: 'center'
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  tab: {
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
    backgroundColor: '#F9FAFB',
    marginRight: 8
  },
  tabActive: {
    backgroundColor: '#3B82F6'
  },
  tabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280'
  },
  tabTextActive: {
    color: '#fff'
  },
  routesList: {
    padding: 16
  },
  routeCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2
  },
  routeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  routeHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 8
  },
  routeId: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1F2937',
    marginRight: 8
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6
  },
  statusText: {
    fontSize: 10,
    fontWeight: 'bold'
  },
  priorityBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
    marginLeft: 4
  },
  priorityText: {
    fontSize: 10,
    fontWeight: 'bold',
    marginLeft: 4
  },
  routeName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12
  },
  locationContainer: {
    marginBottom: 12
  },
  locationRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8
  },
  locationDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginTop: 4,
    marginRight: 12
  },
  locationInfo: {
    flex: 1
  },
  locationLabel: {
    fontSize: 11,
    color: '#6B7280',
    textTransform: 'uppercase',
    fontWeight: '600',
    marginBottom: 2
  },
  locationName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 2
  },
  locationAddress: {
    fontSize: 12,
    color: '#6B7280'
  },
  stopsIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingLeft: 6,
    marginBottom: 8
  },
  stopsText: {
    fontSize: 12,
    color: '#6B7280',
    marginLeft: 4
  },
  detailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB'
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 4
  },
  detailText: {
    fontSize: 12,
    color: '#1F2937',
    fontWeight: '600',
    marginLeft: 4
  },
  assignmentRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12
  },
  assignmentItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 6
  },
  assignmentText: {
    fontSize: 12,
    color: '#6B7280',
    marginLeft: 6
  },
  quickActions: {
    flexDirection: 'row',
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB'
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    borderRadius: 8,
    marginRight: 8
  },
  startButton: {
    backgroundColor: '#10B981'
  },
  trackButton: {
    backgroundColor: '#3B82F6'
  },
  detailsButton: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#3B82F6'
  },
  actionButtonText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#fff',
    marginLeft: 6
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937',
    marginTop: 16,
    marginBottom: 8
  },
  emptyText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24
  },
  emptyButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#3B82F6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8
  },
  emptyButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#fff',
    marginLeft: 8
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end'
  },
  modalContent: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '90%',
    elevation: 5
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937'
  },
  modalBody: {
    padding: 20
  },
  modalSection: {
    marginBottom: 24
  },
  modalSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 12
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6'
  },
  infoLabel: {
    fontSize: 14,
    color: '#6B7280'
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937'
  },
  locationDetailCard: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8
  },
  locationDetailInfo: {
    flex: 1,
    marginLeft: 12
  },
  locationDetailLabel: {
    fontSize: 11,
    color: '#6B7280',
    textTransform: 'uppercase',
    fontWeight: '600',
    marginBottom: 4
  },
  locationDetailName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 2
  },
  locationDetailAddress: {
    fontSize: 12,
    color: '#6B7280'
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  },
  metricCard: {
    width: (width - 64) / 2,
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginRight: 12,
    marginBottom: 12
  },
  metricValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
    marginTop: 8
  },
  metricLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4
  },
  assignmentDetailCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8
  },
  assignmentDetailInfo: {
    flex: 1,
    marginLeft: 12
  },
  assignmentDetailLabel: {
    fontSize: 11,
    color: '#6B7280',
    textTransform: 'uppercase',
    fontWeight: '600',
    marginBottom: 4
  },
  assignmentDetailValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 2
  },
  assignmentDetailSubtext: {
    fontSize: 12,
    color: '#6B7280'
  },
  orderCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8
  },
  orderText: {
    flex: 1,
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginLeft: 12
  },
  notesCard: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#FEF3C7',
    padding: 12,
    borderRadius: 8
  },
  notesText: {
    flex: 1,
    fontSize: 14,
    color: '#92400E',
    marginLeft: 12
  },
  modalActions: {
    marginTop: 8,
    marginBottom: 20
  },
  modalActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 14,
    borderRadius: 8,
    marginBottom: 12
  },
  modalStartButton: {
    backgroundColor: '#10B981'
  },
  modalCompleteButton: {
    backgroundColor: '#6B7280'
  },
  modalTrackButton: {
    backgroundColor: '#3B82F6'
  },
  modalEditButton: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#3B82F6'
  },
  modalDeleteButton: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#EF4444'
  },
  modalActionButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#fff',
    marginLeft: 8
  }
});

export default RoutesScreen;

